const { isPartOfStreetName, splitNames, splitAddress, formatPhoneNumber } = require('../src/content.js');

test('parse word to be a part of street name / house number', () => {
    // correct parts of street names
    expect(isPartOfStreetName('1st')).toBe(true);
    expect(isPartOfStreetName('Avenue')).toBe(true);
    expect(isPartOfStreetName('3rd')).toBe(true);
    expect(isPartOfStreetName('23rd')).toBe(true);
    expect(isPartOfStreetName('St')).toBe(true);
    expect(isPartOfStreetName('St.')).toBe(true);

    // house/appartment numbers
    expect(isPartOfStreetName('123A')).toBe(false);
    expect(isPartOfStreetName('123')).toBe(false);
    expect(isPartOfStreetName('76/14')).toBe(false);
    expect(isPartOfStreetName('76-14')).toBe(false);
    expect(isPartOfStreetName('76')).toBe(false);
    expect(isPartOfStreetName('14')).toBe(false);
});

test('given name and surname are both required, generate satisfying split of names', () => {
    expect(splitNames('John Doe')).toEqual(['John', 'Doe']);
    expect(splitNames('John Doe Smith')).toEqual(['John', 'Doe Smith']);
    expect(splitNames('John Doe Smith Jr.')).toEqual(['John', 'Doe Smith Jr.']);
    expect(splitNames('John Doe Smith Jr. III')).toEqual(['John', 'Doe Smith Jr. III']);
    expect(splitNames('Zendaya')).toEqual(['Zendaya', 'Zendaya']);
});

test('formatting phone numbers', () => {
    // Czechia
    expect(formatPhoneNumber('+420 123 456 789', isCzechia = true)).toBe('123456789');
    expect(formatPhoneNumber('+420123456789', isCzechia = true)).toBe('123456789');
    expect(formatPhoneNumber('+420 123456789', isCzechia = true)).toBe('123456789');
    expect(formatPhoneNumber('+420123 456 789', isCzechia = true)).toBe('123456789');
    expect(formatPhoneNumber('+420 123-456-789', isCzechia = true)).toBe('123456789');
    expect(formatPhoneNumber('+420123-456-789', isCzechia = true)).toBe('123456789');
    expect(formatPhoneNumber('+420 123 420-789', isCzechia = true)).toBe('123420789');

    // International
    expect(formatPhoneNumber('+1123420789', isCzechia = false)).toBe('+1123420789');
    expect(formatPhoneNumber('1123420789', isCzechia = false)).toBe('+1123420789');
    expect(formatPhoneNumber('+1 123 420 789', isCzechia = false)).toBe('+1123420789');
    expect(formatPhoneNumber('+1 123420789', isCzechia = false)).toBe('+1123420789');
    expect(formatPhoneNumber('+1 123-420-789', isCzechia = false)).toBe('+1123420789');
    expect(formatPhoneNumber('+44 123 420-789', isCzechia = false)).toBe('+44123420789');
    expect(formatPhoneNumber('44 123 420 789', isCzechia = false)).toBe('+44123420789');
});

test('split address into individual part', () => {
    // Addresses below were generated by ChatGPT and/or modified to avoid potential match with real addresses
    expect(splitAddress('John Doe, 109 3rd Avenue, San Francisco California 94110, United States, +15555551234', isCzechia = false))
        .toEqual(['John', 'Doe', '3rd Avenue', '109', 'San Francisco California', '94110', '+15555551234']);

    expect(splitAddress('Marek Novak, 17. listopadu 47/56, Praha 181 00, Czech Republic, +420123456789', isCzechia = true))
        .toEqual(['Marek', 'Novak', '17. listopadu', '47/56', 'Praha', '18100', '123456789']);

    expect(splitAddress('Veronika Vlachová, Náměstí Míru 102/5, Pardubice 530 02, Czech Republic, +420123987654', isCzechia = true))
        .toEqual(['Veronika', 'Vlachová', 'Náměstí Míru', '102/5', 'Pardubice', '53002', '123987654']);

    expect(splitAddress('Linda González, Calle Gran Vía 12, Madrid 28013, Spain, +34912345678', isCzechia = false))
        .toEqual(['Linda', 'González', 'Calle Gran Vía', '12', 'Madrid', '28013', '+34912345678']);

    expect(splitAddress('Hiroshi Tanaka, 1-4-2 Ginza, Chuo-ku, Tokyo 104-0061, Japan, +81312345678', isCzechia = false))
        .toEqual(['Hiroshi', 'Tanaka', 'Ginza', '1-4-2', 'Chuo-ku Tokyo', '104-0061', '+81312345678']);

    expect(splitAddress('Amira Hassan, 15 Cairo St, Zamalek, Cairo 11561, Egypt, +20298765432', isCzechia = false))
        .toEqual(['Amira', 'Hassan', 'Cairo St', '15', 'Zamalek Cairo', '11561', '+20298765432']);

    expect(splitAddress('Harrier Du Bois, 16 Rue de Ravioli, 75004 Paris, France, +33123456789', isCzechia = false))
        .toEqual(['Harrier', 'Du Bois', 'Rue de Ravioli', '16', 'Paris', '75004', '+33123456789']);

    expect(splitAddress('Harrier Du Bois, Rue de Ravioli, 16, 75004 Paris, France, +33123456789', isCzechia = false))
        .toEqual(['Harrier', 'Du Bois', 'Rue de Ravioli', '16', 'Paris', '75004', '+33123456789']);

    expect(splitAddress('Harrier Du Bois, Rue de Ravioli, PO Box 16, 75004 Paris, France, +33123456789', isCzechia = false))
        .toEqual(['Harrier', 'Du Bois', 'Rue de Ravioli', 'PO Box 16', 'Paris', '75004', '+33123456789']);

    expect(splitAddress('Harrier Du Bois, Rue de Ravioli, apt. 16, 75004 Paris, France, +33123456789', isCzechia = false))
        .toEqual(['Harrier', 'Du Bois', 'Rue de Ravioli', 'apt. 16', 'Paris', '75004', '+33123456789']);

    expect(splitAddress('Chen Wei, 79 Nanjing Road, Huangpu District Shanghai 200001, China, +862112345678', isCzechia = false))
        .toEqual(['Chen', 'Wei', 'Nanjing Road', '79', 'Huangpu District Shanghai', '200001', '+862112345678']);

    expect(splitAddress('Roberto Alberque, Avenida Paulista 1548, São Paulo SP 01310-200, Brazil, +5511987654321', isCzechia = false))
        .toEqual(['Roberto', 'Alberque', 'Avenida Paulista', '1548', 'São Paulo SP', '01310-200', '+5511987654321']);

    expect(splitAddress('Svetlana Petrova, 23 Arbat Street, Moscow 119002, Russia, +74951234567', isCzechia = false))
        .toEqual(['Svetlana', 'Petrova', 'Arbat Street', '23', 'Moscow', '119002', '+74951234567']);

    expect(splitAddress('Sven Eriksson, 10 Chapel Road, Red Pinetown, Kettering, NN15 6WS, United Kingdom, 0701233312', isCzechia = false))
        .toEqual(['Sven', 'Eriksson', 'Chapel Road', '10', 'Red Pinetown, Kettering', 'NN156WS', '+0701233312']);

    expect(splitAddress('Sven Eriksson, 10 Chapel Road, Red Pinetown, NN15 6WS, United Kingdom, 0701233312', isCzechia = false))
        .toEqual(['Sven', 'Eriksson', 'Chapel Road', '10', 'Red Pinetown', 'NN156WS', '+0701233312']);

    expect(splitAddress('Peter Wald, 12 Main Road, Ipswich, IP2 9ST, United Kingdom, 0123456789', isCzechia = false))
        .toEqual(['Peter', 'Wald', 'Main Road', '12', 'Ipswich', 'IP29ST', '+0123456789']);

    expect(splitAddress('Mark Horrigan, 211 Hill Road, 14, Big Town, Tennessee 12345, United States, 123123123', isCzechia = false))
        .toEqual(['Mark', 'Horrigan', 'Hill Road', '211 14', 'Big Town Tennessee', '12345', '+123123123']);

    expect(splitAddress('Jane Doe, 123 Elm Street, 2e etage, 12345 Springfield, USA, +1234567890', isCzechia = false))
        .toEqual(['Jane', 'Doe', 'Elm Street', '123 2e etage', 'Springfield', '12345', '+1234567890']);

    expect(splitAddress('Linda Armstrong, 13 Brighthill Court, Marvin A 994, Brooklyn New York 14623, United States, +123123123', isCzechia = false))
        .toEqual(['Linda', 'Armstrong', 'Brighthill Court Marvin A', '13 994', 'Brooklyn New York', '14623', '+123123123']);
});